import{dp as m,dq as c,aF as g,aV as n,L as d,cy as h,df as l,M as o,N as w,P as u}from"./index-DZ60W3WD.js";import{S as y,u as V}from"./LayerView-Cs8QG4Po.js";import{t as f}from"./GraphicContainer-CFU6iGi9.js";import{O as v}from"./GraphicsView2D-Ca0J-vyE.js";import"./Container-eSSbxVua.js";import"./AGraphicContainer-CP6q-iAN.js";import"./TechniqueInstance-BH1wKWN5.js";import"./UpdateTracking2D-J-So0x-h.js";import"./Utils-Fwtidjub.js";import"./VertexElementDescriptor-BLyltQyJ.js";import"./FramebufferObject-CipUq9KB.js";import"./ProgramTemplate-BYFZm6eT.js";import"./TileContainer-B7rV0a6y.js";import"./WGLContainer-WJFxE3MI.js";import"./vec3f32-WCVSSNPR.js";import"./StyleDefinition-Db-Kp58P.js";import"./config-DHajyIwB.js";import"./earcut-D9gy186-.js";import"./featureConversionUtils-CK6pTHA5.js";import"./OptimizedFeature-BNoEQu6f.js";import"./OptimizedFeatureSet-BR8EEvDc.js";import"./FeatureCommandQueue-dSIsPzfu.js";import"./TechniqueType-pk2C5RYg.js";import"./GraphShaderModule-DSNnHje1.js";import"./ShaderBuilder-C1K-hcPq.js";import"./BindType-BBwFZqyN.js";import"./utils-DL11jvbt.js";import"./constants-BFLErLYb.js";import"./streamLayerUtils-CKwt2uXH.js";import"./QueueProcessor-CyWPiIKe.js";import"./AttributeStore-DFQxJ4A1.js";import"./queryUtils-CDGaGZBc.js";import"./json-Wa8cmqdu.js";import"./timeSupport-CQTk6uJk.js";import"./normalizeUtilsSync-CQAVvp5g.js";import"./mat3f64-B5o_lm6j.js";import"./dehydratedFeatures-qcqDMTXY.js";let p=class extends y(V){attach(){this.graphicsView=new v({requestUpdateCallback:()=>this.requestUpdate(),view:this.view,graphics:this.layer.graphics,container:new f(this.view.featuresTilingScheme),layerId:this.layer.id}),this.container.addChild(this.graphicsView.container),this.addAttachHandles([this.layer.on("graphic-update",this.graphicsView.graphicUpdateHandler),m((()=>{var i;return(i=this.layer)==null?void 0:i.visible}),(()=>{this.graphicsView.update({state:this.view.state}),this.graphicsView.pushUpdate()}))]),this._processHighlight()}detach(){this.container.removeAllChildren(),this.graphicsView=c(this.graphicsView)}async hitTest(i){return this.graphicsView?this.graphicsView.hitTest(i).map((t=>({type:"graphic",graphic:t,mapPoint:i,layer:this.layer}))):null}queryGraphics(){return Promise.resolve(this.graphicsView.graphics)}update(i){this.graphicsView.processUpdate(i)}viewChange(){this.graphicsView.viewChange()}moveEnd(){}isUpdating(){return!this.graphicsView||this.graphicsView.updating}highlight(i,t){let r;typeof i=="number"?r=[i]:i instanceof g?r=[i.uid]:Array.isArray(i)&&i.length>0?r=typeof i[0]=="number"?i:i.map((s=>s&&s.uid)):n.isCollection(i)&&i.length>0&&(r=i.map((s=>s&&s.uid)).toArray());const e=r==null?void 0:r.filter(d);if(!(e!=null&&e.length))return h();const a=(t==null?void 0:t.name)??l;return this._addHighlights(e,a),h((()=>!this.destroyed&&this._removeHighlights(e,a)))}_processHighlight(){var t;const i=this._getHighlights();(t=this.graphicsView)==null||t.setHighlight(i)}};o([w()],p.prototype,"graphicsView",void 0),p=o([u("esri.views.2d.layers.GraphicsLayerView2D")],p);const si=p;export{si as default};
