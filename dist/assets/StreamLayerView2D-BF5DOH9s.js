import{M as s,N as o,hH as _,P as m,ad as u,s as l,hF as g,cy as f,aL as d,f3 as v}from"./index-JAk2srNG.js";import{n as S,c as C}from"./FeatureLayerView2D-DkgNoGXr.js";import"./featureConversionUtils-B4gwakeE.js";import"./OptimizedFeature-DJZNYrYk.js";import"./OptimizedFeatureSet-BR8EEvDc.js";import"./timeSupport-CqsSjJ8W.js";import"./AttributeBinsFeatureSet-C2y4_ls-.js";import"./AttributeBinsQuery-Sz0Uldrk.js";import"./queryUtils-B3y7aXe_.js";import"./json-Wa8cmqdu.js";import"./FixedIntervalBinParameters-TkRa8Q0Z.js";import"./LayerView-Ct47ecWd.js";import"./Container-CuCZbB9J.js";import"./TechniqueInstance-CGc4XLNu.js";import"./UpdateTracking2D-BY3P0Dhb.js";import"./Utils-CUjRryjP.js";import"./VertexElementDescriptor-BLyltQyJ.js";import"./FramebufferObject-CVC1BJcz.js";import"./ProgramTemplate-Csake3OC.js";import"./TileContainer-CbMN6Uvd.js";import"./WGLContainer-B9B4qeuQ.js";import"./vec3f32-WCVSSNPR.js";import"./StyleDefinition-DTSipTSg.js";import"./config-DHajyIwB.js";import"./earcut-D9gy186-.js";import"./FeatureCommandQueue-C-u0AlAh.js";import"./TechniqueType-pk2C5RYg.js";import"./GraphShaderModule-BlaeRlNJ.js";import"./ShaderBuilder-UVY1EA_f.js";import"./BindType-BBwFZqyN.js";import"./utils-GgGEr5cK.js";import"./constants-BFLErLYb.js";import"./streamLayerUtils-CKwt2uXH.js";import"./QueueProcessor-CNTiJWXO.js";import"./CircularArray-CujHzHWW.js";import"./SDFHelper-kmtD6UyU.js";import"./constants-B4mRqufT.js";import"./bundle-BZ599VL2.js";import"./popupUtils-D4LrkLxf.js";import"./RefreshableLayerView-xSizcSOh.js";const P=e=>{let t=class extends e{resume(){this._isUserPaused=!1,this.suspended||this._doResume()}pause(){this._isUserPaused=!0,this.suspended||this._doPause()}disconnect(){this._doDisconnect()}connect(){this._doConnect()}clear(){this._doClear()}constructor(...r){super(...r),this._isUserPaused=!1,this.filter=null}get connectionStatus(){return(this._isUserPaused||this.suspended)&&this._streamConnectionStatus==="connected"?"paused":this._streamConnectionStatus}_onSuspendedChange(r){r?this._doPause():this._isUserPaused||this._doResume()}};return s([o()],t.prototype,"_isUserPaused",void 0),s([o({readOnly:!0})],t.prototype,"connectionStatus",null),s([o({type:_})],t.prototype,"filter",void 0),t=s([m("esri.views.layers.StreamLayerView")],t),t};let n=class extends P(C){constructor(){super(...arguments),this.pipelineConnectionStatus="disconnected",this.pipelineErrorString=null}initialize(){this.addHandles([u((()=>this.layer.customParameters),(async e=>{(await this.getWorker()).streamMessenger.updateCustomParameters(e)})),this.layer.on("send-message-to-socket",(async e=>{(await this.getWorker()).streamMessenger.sendMessageToSocket(e)})),this.layer.on("send-message-to-client",(async e=>{(await this.getWorker()).streamMessenger.sendMessageToClient(e),this._isUserPaused&&"type"in e&&e.type==="clear"&&this.incrementSourceRefreshVersion()})),u((()=>this.layer.purgeOptions),(()=>this._update())),u((()=>this.suspended),this._onSuspendedChange.bind(this))],"constructor"),this._doResume()}destroy(){this._doPause()}get connectionError(){return this.pipelineErrorString?new l("stream-controller",this.pipelineErrorString):null}on(e,t){if(Array.isArray(e))return g(e.map((i=>this.on(i,t))));const r=["data-received","message-received"].includes(e);r&&this.getWorker().then((i=>i.streamMessenger.enableEvent(e,!0)));const p=super.on(e,t),a=this;return f((()=>{p.remove(),r&&(a._workerProxy.closed||a.hasEventListener(e)||a.getWorker().then((i=>i.streamMessenger.enableEvent(e,!1))))}))}async queryLatestObservations(e,t){var p,a,i;if(!((p=this.layer.timeInfo)!=null&&p.endField||(a=this.layer.timeInfo)!=null&&a.startField||(i=this.layer.timeInfo)!=null&&i.trackIdField))throw new l("streamlayer-no-timeField","queryLatestObservation can only be used with services that define a TrackIdField");const r=await this.getWorker();return S(r.features.executeQueryForLatestObservations(this._cleanUpQuery(e),t).then((y=>{const c=d.fromJSON(y);return c.features.forEach((h=>{h.layer=this.layer,h.sourceLayer=this.layer})),c})),new d({features:[]}))}detach(){super.detach(),this.pipelineConnectionStatus="disconnected"}async queryObjectIds(e,t){return(await super.queryObjectIds(e,t)).filter(v)}get _streamConnectionStatus(){return this.pipelineConnectionStatus}_doPause(){this._refreshInterval!=null&&(clearInterval(this._refreshInterval),this._refreshInterval=null)}_doResume(){this._refreshInterval==null&&(this._refreshInterval=setInterval((()=>this.incrementSourceRefreshVersion()),this.layer.updateInterval))}_doDisconnect(){this.getWorker().then((e=>e.streamMessenger.disconnect())),this._doPause()}_doConnect(){this.getWorker().then((e=>e.streamMessenger.connect())),this.resume()}_doClear(){this.getWorker().then((e=>e.streamMessenger.clear())),this._refreshInterval==null&&this.incrementSourceRefreshVersion()}_createClientOptions(){const e=super._createClientOptions(),t=this;return{...e,get container(){return t.featureContainer},setProperty:r=>{this.set(r.propertyName,r.value)}}}};s([o()],n.prototype,"pipelineConnectionStatus",void 0),s([o()],n.prototype,"pipelineErrorString",void 0),s([o({readOnly:!0})],n.prototype,"connectionError",null),s([o({readOnly:!0})],n.prototype,"_streamConnectionStatus",null),n=s([m("esri.views.2d.layers.StreamLayerView2D")],n);const ue=n;export{ue as default};
