import{ax as p,s as m,aH as s}from"./index-oRJNrJQ7.js";import{p as a}from"./MeshVertexAttributes-DTiVLqRf.js";import{B as n}from"./vertexSpaceConversion-cvOeC3j5.js";import"./meshProperties-Cj6q1fp6.js";import"./mat3f64-B5o_lm6j.js";import"./mat4f64-q_b6UJoq.js";import"./spatialReferenceEllipsoidUtils-l-jQ92BA.js";import"./computeTranslationToOriginAndRotation-Bm_T70N9.js";import"./projectPointToVector-Cpm20Ddl.js";import"./meshVertexSpaceUtils-DKGjZ-KN.js";import"./MeshLocalVertexSpace-DxQoFbdS.js";import"./vec3-CWs-8zdq.js";import"./BufferView-CtOdMez5.js";import"./vec4-CUtEzu0R.js";async function E(t,o,r){await Promise.resolve(),p(r);const e=n(t,o,{useEllipsoid:r==null?void 0:r.useEllipsoid});if(!e)throw new m("meshUtils:convertVertexSpace()","Failed to convert to provided vertex space due to projection errors");const i=t.cloneAndModifyVertexAttributes(new a({...e,uv:s(t.vertexAttributes.uv),color:s(t.vertexAttributes.color)}),o);return i.transform=null,i}export{E as convertMeshVertexSpace};
