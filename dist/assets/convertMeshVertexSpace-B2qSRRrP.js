import{ax as p,s as m,aK as s}from"./index-Bqc9jASG.js";import{p as a}from"./MeshVertexAttributes-BUKMr0Vl.js";import{B as n}from"./vertexSpaceConversion--eYG7aEp.js";import"./meshProperties-Cj6q1fp6.js";import"./mat3f64-B5o_lm6j.js";import"./mat4f64-q_b6UJoq.js";import"./spatialReferenceEllipsoidUtils-DpEYb1eK.js";import"./computeTranslationToOriginAndRotation-DZuAH4dH.js";import"./projectPointToVector-D4-UpaYw.js";import"./meshVertexSpaceUtils-CTVWhq5r.js";import"./MeshLocalVertexSpace-C0UY3QSJ.js";import"./vec3-D0oZ_iob.js";import"./BufferView-D6Y_LT4U.js";import"./vec4-DQHdqYtD.js";async function E(t,o,r){await Promise.resolve(),p(r);const e=n(t,o,{useEllipsoid:r==null?void 0:r.useEllipsoid});if(!e)throw new m("meshUtils:convertVertexSpace()","Failed to convert to provided vertex space due to projection errors");const i=t.cloneAndModifyVertexAttributes(new a({...e,uv:s(t.vertexAttributes.uv),color:s(t.vertexAttributes.color)}),o);return i.transform=null,i}export{E as convertMeshVertexSpace};
