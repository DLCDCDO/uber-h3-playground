import{ax as p,s as m,aH as s}from"./index-JAk2srNG.js";import{p as a}from"./MeshVertexAttributes-Fbw0MVzS.js";import{B as n}from"./vertexSpaceConversion-DzHC9fX_.js";import"./meshProperties-Cj6q1fp6.js";import"./mat3f64-B5o_lm6j.js";import"./mat4f64-q_b6UJoq.js";import"./spatialReferenceEllipsoidUtils-BBDLhl3g.js";import"./computeTranslationToOriginAndRotation-DxwlQzmB.js";import"./projectPointToVector-BY208wV-.js";import"./meshVertexSpaceUtils-RQkYeVKv.js";import"./MeshLocalVertexSpace-X5AUGTXC.js";import"./vec3-Wr-6T6wo.js";import"./BufferView-B9-m07QU.js";import"./vec4-B9kgieoI.js";async function E(t,o,r){await Promise.resolve(),p(r);const e=n(t,o,{useEllipsoid:r==null?void 0:r.useEllipsoid});if(!e)throw new m("meshUtils:convertVertexSpace()","Failed to convert to provided vertex space due to projection errors");const i=t.cloneAndModifyVertexAttributes(new a({...e,uv:s(t.vertexAttributes.uv),color:s(t.vertexAttributes.color)}),o);return i.transform=null,i}export{E as convertMeshVertexSpace};
