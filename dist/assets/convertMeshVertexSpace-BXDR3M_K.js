import{ax as p,s as m,aH as s}from"./index-B0RXyCM4.js";import{p as a}from"./MeshVertexAttributes-DbNIaT6X.js";import{B as n}from"./vertexSpaceConversion-_19fgjKE.js";import"./meshProperties-Cj6q1fp6.js";import"./mat3f64-B5o_lm6j.js";import"./mat4f64-q_b6UJoq.js";import"./spatialReferenceEllipsoidUtils-BSJ0wCZm.js";import"./computeTranslationToOriginAndRotation-dg2tGVK-.js";import"./projectPointToVector-DypTEH2M.js";import"./meshVertexSpaceUtils-j4qCwsbA.js";import"./MeshLocalVertexSpace-C2abzOHI.js";import"./vec3-DL5E2jQ_.js";import"./BufferView-BcCVgjL1.js";import"./vec4-bx2L_5SV.js";async function E(t,o,r){await Promise.resolve(),p(r);const e=n(t,o,{useEllipsoid:r==null?void 0:r.useEllipsoid});if(!e)throw new m("meshUtils:convertVertexSpace()","Failed to convert to provided vertex space due to projection errors");const i=t.cloneAndModifyVertexAttributes(new a({...e,uv:s(t.vertexAttributes.uv),color:s(t.vertexAttributes.color)}),o);return i.transform=null,i}export{E as convertMeshVertexSpace};
