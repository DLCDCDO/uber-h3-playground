import{ax as p,s as m,aH as s}from"./index-BzHaw56Z.js";import{p as a}from"./MeshVertexAttributes-BNJnGY5O.js";import{B as n}from"./vertexSpaceConversion-Wk7RnEU6.js";import"./meshProperties-Cj6q1fp6.js";import"./mat3f64-B5o_lm6j.js";import"./mat4f64-q_b6UJoq.js";import"./spatialReferenceEllipsoidUtils-BWiVkoI4.js";import"./computeTranslationToOriginAndRotation-9CK9cHCw.js";import"./projectPointToVector-Ca346R3b.js";import"./meshVertexSpaceUtils-CdW44ro4.js";import"./MeshLocalVertexSpace-Bm5yNA5x.js";import"./vec3-DpvHiR90.js";import"./BufferView-BTdrJe2e.js";import"./vec4-AfNM65AF.js";async function E(t,o,r){await Promise.resolve(),p(r);const e=n(t,o,{useEllipsoid:r==null?void 0:r.useEllipsoid});if(!e)throw new m("meshUtils:convertVertexSpace()","Failed to convert to provided vertex space due to projection errors");const i=t.cloneAndModifyVertexAttributes(new a({...e,uv:s(t.vertexAttributes.uv),color:s(t.vertexAttributes.color)}),o);return i.transform=null,i}export{E as convertMeshVertexSpace};
