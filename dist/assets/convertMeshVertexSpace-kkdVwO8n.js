import{ax as p,s as m,aH as s}from"./index-DMW0RaRK.js";import{p as a}from"./MeshVertexAttributes-DemMQhK8.js";import{B as n}from"./vertexSpaceConversion-BC0Iv-Gg.js";import"./meshProperties-Cj6q1fp6.js";import"./mat3f64-B5o_lm6j.js";import"./mat4f64-q_b6UJoq.js";import"./spatialReferenceEllipsoidUtils-CjGHb6_M.js";import"./computeTranslationToOriginAndRotation-CLoc7GOB.js";import"./projectPointToVector-Z54-9eI0.js";import"./meshVertexSpaceUtils-C8k9JpEN.js";import"./MeshLocalVertexSpace-o8v8UF8U.js";import"./vec3-uthXHkt2.js";import"./BufferView-uVYIw0El.js";import"./vec4-Cud5mFlR.js";async function E(t,o,r){await Promise.resolve(),p(r);const e=n(t,o,{useEllipsoid:r==null?void 0:r.useEllipsoid});if(!e)throw new m("meshUtils:convertVertexSpace()","Failed to convert to provided vertex space due to projection errors");const i=t.cloneAndModifyVertexAttributes(new a({...e,uv:s(t.vertexAttributes.uv),color:s(t.vertexAttributes.color)}),o);return i.transform=null,i}export{E as convertMeshVertexSpace};
