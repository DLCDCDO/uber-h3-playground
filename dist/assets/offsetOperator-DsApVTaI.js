import{gW as c,L as x}from"./index-B0RXyCM4.js";import{w as d,j as g}from"./operatorOffset-CIYJQSzw.js";import{getSpatialReference as f,fromGeometry as y,toGeometry as u,fromGeometries as G}from"./jsonConverter-DVG-EWeE.js";import"./SimpleGeometryCursor-B92kdZ15.js";import"./ProjectionTransformation-C4JZ_6v-.js";import"./Envelope2D-DCFOap0l.js";import"./Point2D-BKUZbx33.js";import"./Transformation2D-BtRBxhWN.js";import"./OperatorDefinitions-DP7_WWTp.js";const l={round:0,bevel:1,miter:2,square:3};function B(e,t,n={}){const{miterLimit:a=10,flattenError:s=0,joins:p="round",unit:r}=n,o=f(e);r&&o&&(t=c(t,r,o));const m=y(e),i=m.getSpatialReference();return u(d(m.getGeometry(),i,t,l[p],a,s),i)}function I(e,t,n={}){const{miterLimit:a=10,flattenError:s=0,joins:p="round",unit:r}=n,o=f(e);r&&o&&(t=c(t,r,o));const[m,i]=G(e);return g(m,i,t,l[p],a,s).map((j=>u(j,i))).filter(x)}export{B as execute,I as executeMany};
